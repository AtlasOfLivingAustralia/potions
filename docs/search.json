[{"path":"https://potions.ala.org.au/articles/quick-start-guide.html","id":"basic-usage","dir":"Articles","previous_headings":"","what":"Basic usage","title":"Quick start guide","text":"potions three basic functions: brew() store data pour() retrieve data drain() clear data first step store data using brew(), accepts data three formats: Named arguments, e.g. brew(x = 1) list, e.g. brew(list(x = 1)) configuration file, e.g. brew(file = \"-config-file.yml\") Information stored using brew can retrieved using pour:","code":"library(potions)  brew(x = 1)  paste0(\"The value of x is \", pour(\"x\")) #> [1] \"The value of x is 1\"  drain()"},{"path":"https://potions.ala.org.au/articles/quick-start-guide.html","id":"interactions-with-global-options","dir":"Articles","previous_headings":"","what":"Interactions with global options","title":"Quick start guide","text":"potions uses novel S3 object data storage, never overwrites existing global options, therefore safe use without affecting existing workflows. example, print.default takes ’s default digits argument getOption(\"digits\"): use potions set digits, affect behaviour. Instead, user must specifically retrieve data using pour settings applied: feature - .e. storing data novel S3 object - means potions can distinguish interactive use console versus called within package. Data can provided used independently multiple packages, console, without generating conflicts. Options stored using potions persistent across sessions; need reload options time open new workspace. unlikely, therefore, need ‘clear’ data stored potions point. need remove data, can using drain() (without arguments).","code":"options(\"digits\") # set to 7 by default #> $digits #> [1] 7 print(pi) #> [1] 3.141593 library(potions) brew(digits = 3)  print(pi, digits = pour(\"digits\")) # using potions #> [1] 3.14 print(pi) # default is unaffected #> [1] 3.141593"},{"path":"https://potions.ala.org.au/articles/quick-start-guide.html","id":"using-config-files","dir":"Articles","previous_headings":"","what":"Using config files","title":"Quick start guide","text":"Often necessary share script, without sharing certain sensitive information necessary run code. common example API keys sensitive information required download data web service. cases, default, interactive method using brew() insufficient, .e. avoid problem, can instead supply path file containing information, .e. can simply add corresponding file name gitignore, script still run, without sharing sensitive information.","code":"# start of script brew(list(\"my-secret-key\" = \"123456\")) # shares secret information brew(file = \"config.yml\") # hides secret information"},{"path":"https://potions.ala.org.au/articles/quick-start-guide.html","id":"using-potions-in-package-development","dir":"Articles","previous_headings":"","what":"Using potions in package development","title":"Quick start guide","text":"weighing architectural decisions packages share information functions, solutions developers can choose : developer needs able call static information across multiple functions, efficient solution use sysdata.rda, supports internal use named objects avoiding options() completely. function relies information stored options(), override, possible temporarily reset options() within function. cases, CRAN requires initial state restored use, .exit() sensible choice (See Advanced R section 6.7.4). Finally, need dynamic, package-wide options can changed developer user, packages potions settings can valuable. use potions package development situation, create file R directory called onLoad.R, containing following code: important tells potions developing package, package called, future calls brew() within package place data. also possible add defaults , e.g. Often developing package, want users call configuration function, rather call brew() directly. provides greater control names & types data stored potions, turn gives - developer - greater certainty calling data within package via pour(). example, might want specify specific argument supplied numeric: additional benefit writing wrapper function allow users provide config file. easiest way support file argument within function, pass directly brew(): approach risky, however, doesn’t allow checks. alternative intercept file, run checks, pass result brew():","code":".onLoad <- function(libname, pkgname) {   if(pkgname == \"packagenamehere\") {     potions::brew(.pkg = \"packagenamehere\")   } } .onLoad <- function(libname, pkgname) {   if(pkgname == \"packagenamehere\") {     potions::brew(       n_attempts == 5,       verbose == TRUE,       .pkg = \"packagenamehere\")   } } packagename_config <- function(fontsize = 10){   if(!is.numeric(fontsize)){     rlang::abort(\"Argument `fontsize` must be a number\")   }   brew(list(fontsize = fontsize)) } packagename_config <- function(file = NULL){   if(!is.null(file)){     brew(file = file)   } } packagename_config <- function(file = NULL){   if(!is.null(file)){     config_data <- potions::read_config(x)     # add any checks to `data` that are needed here     if(length(names(data)) != length(data)){       rlang::abort(\"Not all entries are named!\")     }     # pass to `brew`     brew(config_data)   } }"},{"path":"https://potions.ala.org.au/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martin Westgate. Author, maintainer.","code":""},{"path":"https://potions.ala.org.au/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Westgate M (2023). potions: simple options management. R package version 0.2.0, https://CRAN.R-project.org/package=potions.","code":"@Manual{,   title = {potions: simple options management},   author = {Martin Westgate},   year = {2023},   note = {R package version 0.2.0},   url = {https://CRAN.R-project.org/package=potions}, }"},{"path":"https://potions.ala.org.au/reference/brew.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up potions for easy data retrieval — brew","title":"Set up potions for easy data retrieval — brew","text":"Function place list options(), update previously-stored data.","code":""},{"path":"https://potions.ala.org.au/reference/brew.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up potions for easy data retrieval — brew","text":"","code":"brew(   ...,   file,   .slot,   .pkg,   method = c(\"modify\", \"merge\", \"overwrite\", \"leaves\") )  brew_package(..., file, .pkg, method)  brew_interactive(..., file, .slot, method)"},{"path":"https://potions.ala.org.au/reference/brew.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up potions for easy data retrieval — brew","text":"... One named arguments giving attributes stored; alternatively list containing . file string: optional file containing data stored via options(). Valid formats .yml .json. .slot string: optional name mandate data stored. Defaults random string generated stringi::stri_rand_strings(). .pkg string: package name potions used within. Typically used onLoad(), later calls require argument set. method string: new data written options()? See details specifics.","code":""},{"path":"https://potions.ala.org.au/reference/brew.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up potions for easy data retrieval — brew","text":"function never returns object; called ' side- effect caching data using options().","code":""},{"path":"https://potions.ala.org.au/reference/brew.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set up potions for easy data retrieval — brew","text":"default method use brew without setting either .pkg .slot (), letting potions determine slot use. greater control needed, can use brew_package() brew_interactive(). Note neither .slot .pkg set, potions defaults .slot , unless .pkg information previously supplied (.slot information ). might undesirable package development situation. ... file arguments empty, function sets empty potions object options(\"potions-pkg\"); See potions-class information data type. ... file arguments provided, amalgamated using purrr::list_modify(). identical names lists, ... chosen. user repeatedly calls brew(), later list entries overwrite early entries. Whole lists overwritten unless top-level entry names match, method set \"overwrite\", shortcut using drain() brew(). default behaviour method = \"modify\", uses purrr::list_modify() joining. Similarly \"merge\" uses purrr::list_merge(). method = \"leaves\" overwrites terminal nodes, leaving structure list otherwise unaffected. non-nested lists, behaviour identical \"modify\", nested lists can useful shortcut.","code":""},{"path":"https://potions.ala.org.au/reference/brew.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up potions for easy data retrieval — brew","text":"","code":"# basic usage is to pass arguments using `=` brew(x = 1)  # lists are also permitted list(x = 2) |> brew()  # as are passing lists as objects my_list <- list(x = 3) my_list |> brew()  # or within a function my_fun <- function(){list(x = 1, y = 2)} my_fun() |> brew()  # optional clean-up drain()"},{"path":"https://potions.ala.org.au/reference/drain.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear package options — drain","title":"Clear package options — drain","text":"Clear options previously specified content. cases, calling drain arguments sufficient, arguments .slot .pkg, corresponding functions drain_interactive() drain_package() provided case greater control needed. rarely needed packages, possible manually specify use multiple slots using potions::brew() interactively.","code":""},{"path":"https://potions.ala.org.au/reference/drain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear package options — drain","text":"","code":"drain(.slot, .pkg)  drain_package(.pkg)  drain_interactive(.slot)"},{"path":"https://potions.ala.org.au/reference/drain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clear package options — drain","text":".slot (optional) slot clear options() .pkg (optional) package clear options()","code":""},{"path":"https://potions.ala.org.au/reference/drain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clear package options — drain","text":"function never returns object; called ' side- effect removing data options().","code":""},{"path":"https://potions.ala.org.au/reference/drain.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clear package options — drain","text":"Note function vectorized, passing multiple values .slot .pkg fail (e.g. drain(.slot = c(\"x\", \"y\"))). Similarly, passing arguments .slot .pkg fail.","code":""},{"path":"https://potions.ala.org.au/reference/potions-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for potions data — potions-class","title":"Methods for potions data — potions-class","text":"package stores data list-like format, named class potions. contains three entries: slots contains data stored 'interactive' mode; packages contains data packages built using potions; mapping stores data understand contents two slots.","code":""},{"path":"https://potions.ala.org.au/reference/potions-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for potions data — potions-class","text":"","code":"create_potions()  # S3 method for potions print(x, ...)"},{"path":"https://potions.ala.org.au/reference/potions-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for potions data — potions-class","text":"x object class potions ... arguments print()","code":""},{"path":"https://potions.ala.org.au/reference/potions-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Methods for potions data — potions-class","text":"case create_potions(), empty potions object. print.potions() displays potions object using lobstr::tree().","code":""},{"path":"https://potions.ala.org.au/reference/potions.html","id":null,"dir":"Reference","previous_headings":"","what":"potions: simple options management — potions","title":"potions: simple options management — potions","text":"Often useful set bespoke options single workflow, within single package, without altering global options influence users packages. possible base::options() related functions, however requires bespoke knowledge. potions makes options management easy possible, decreasing programmers' cognitive burden storing retrieving information. following three guiding principles: minimalist: potions three core functions laconic: functions use characters possible familiar: uses UI data retrieval based {} package combination, features make easy users developers manage options using potions.","code":""},{"path":"https://potions.ala.org.au/reference/potions.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"potions: simple options management — potions","text":"brew(): store data options() pour(): retrieve data options() drain(): remove data stored using brew()","code":""},{"path":[]},{"path":"https://potions.ala.org.au/reference/potions.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"potions: simple options management — potions","text":"Maintainer: Martin Westgate martin.westgate@csiro.au","code":""},{"path":"https://potions.ala.org.au/reference/pour.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve information stored using potions::brew() — pour","title":"Retrieve information stored using potions::brew() — pour","text":"main function users call . retrieves data potions object stored using brew(). UI function based package, uses list names separated commas navigate nested content. differs requiring names quoted.","code":""},{"path":"https://potions.ala.org.au/reference/pour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve information stored using potions::brew() — pour","text":"","code":"pour(..., .slot, .pkg)  pour_package(..., .pkg)  pour_interactive(..., .slot)  pour_all()"},{"path":"https://potions.ala.org.au/reference/pour.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve information stored using potions::brew() — pour","text":"... string: slots returned .slot string: Optional manual override default slot .pkg string: Optional manual override default package","code":""},{"path":"https://potions.ala.org.au/reference/pour.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve information stored using potions::brew() — pour","text":"arguments passed ..., returns list default slot. ... supplied (correctly), returns vector values matching names.","code":""},{"path":"https://potions.ala.org.au/reference/pour.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve information stored using potions::brew() — pour","text":"Providing multiple arguments ... brings back nested values, .e. pour(\"x\", \"y\") case object structured list(x = list(y = 1)), rather list(x = 1, y = 2). latter case necessary call either arguments (unlist(pour())), greater control, call pour multiple times specifying different entries time (e.g. z <- c(pour(\"x\"), pour(\"y\"))). Additional functions provided case greater specificity required. pour_interactive(.slot = ...) synonymous pour(.slot = ...), pour_package(.pkg = ...) synonymous pour(.pkg = ...). pour_all() shortcut getOption(\"potions-pkg\"); .e. show data stored using potions package slot, accept arguments.","code":""},{"path":"https://potions.ala.org.au/reference/pour.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve information stored using potions::brew() — pour","text":"","code":"# first import some data brew(x = 1, y = list(a = 2, b = 3))  # get all data pour() #> $x #> [1] 1 #>  #> $y #> $y$a #> [1] 2 #>  #> $y$b #> [1] 3 #>  #>   # get only data from slot x pour(\"x\") #> [1] 1  # get nested data pour(\"y\", \"a\") #> [1] 2  # optional clean-up drain()"},{"path":"https://potions.ala.org.au/reference/read_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle configuration data from a file — read_config","title":"Handle configuration data from a file — read_config","text":"primarily internal function importing configuration information file. called brew(), detects .yml .json files file extentions; actual work done yaml::read_yaml jsonlite::read_json respectively. available exported function users can check data imported correctly, developers may wish intercept configuration files checking purposes.","code":""},{"path":"https://potions.ala.org.au/reference/read_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle configuration data from a file — read_config","text":"","code":"read_config(file)"},{"path":"https://potions.ala.org.au/reference/read_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle configuration data from a file — read_config","text":"file string: path file. Readable formats .yml .json.","code":""},{"path":"https://potions.ala.org.au/reference/read_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle configuration data from a file — read_config","text":"list containing data specified file.","code":""},{"path":"https://potions.ala.org.au/news/index.html","id":"potions-020","dir":"Changelog","previous_headings":"","what":"potions 0.2.0","title":"potions 0.2.0","text":"move purrr main engine list management remove NSE capabilities consistency purrr pour() returns list default, rather vector","code":""},{"path":"https://potions.ala.org.au/news/index.html","id":"potions-010","dir":"Changelog","previous_headings":"","what":"potions 0.1.0","title":"potions 0.1.0","text":"CRAN release: 2023-05-02 First version released CRAN 2023-05-03.","code":""}]
