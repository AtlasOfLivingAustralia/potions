% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/brew.R
\name{brew}
\alias{brew}
\alias{brew_package}
\alias{brew_interactive}
\title{Set up potions for easy data retrieval}
\usage{
brew(.data, .slot, .pkg)

brew_package(.data, .pkg)

brew_interactive(.data, .slot)
}
\arguments{
\item{.data}{a list containing data to be stored via \code{options()}.}

\item{.slot}{string: optional name to mandate where data is stored. Defaults
to a random string generated by \code{stringi::stri_rand_strings}.}

\item{.pkg}{string: package name that \code{{potions}} is being used within. If
using {potions} within a package development process, set this argument
instead of \code{slot}.}
}
\description{
Start-up function to place a list into \code{options} with a specified
slot name.
}
\details{
The default method is to use \code{brew} and set either \code{.pkg} or \code{.slot}, but not
both. Alternatively you can use \code{brew_package()} or \code{brew_interactive()}.
Note that if neither \code{.slot} or \code{.pkg} are set, \code{potions} defaults to \code{.slot}
, unless \code{.pkg} information has previously been supplied (and \code{.slot}
information has not). This might be undesirable in a package development
situation.

If no \code{.data} argument is given, this function sets up an empty \code{potions}
object in \code{options("potions-pkg")}. See \code{potions-class} for more information.

If the user repeatedly calls \code{brew()}, later list entries overwrite early
entries. Whole lists are not overwritten unless all top-level entry names
match.
}
